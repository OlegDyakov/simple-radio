
04_TIM2_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vectors      00000400  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  0800063c  0800063c  0001063c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  08000640  08000640  00010640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .bss          00000004  20000000  20000000  00020000  2**2
                  ALLOC
  5 .data         00000000  20000004  20000004  00010644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ARM.attributes 00000030  00000000  00000000  00010644  2**0
                  CONTENTS, READONLY
  7 .comment      00000053  00000000  00000000  00010674  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000035c  00000000  00000000  000106c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00000290  00000000  00000000  00010a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000000d8  00000000  00000000  00010cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000070  00000000  00000000  00010d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00001091  00000000  00000000  00010dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00000442  00000000  00000000  00011e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0000483f  00000000  00000000  000122ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00000160  00000000  00000000  00016b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000400 <DAC1_Init>:
#include <stm32g431.h>


//Выход DAC1 на PA4
void DAC1_Init(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

	SET_BIT(RCC_AHB2ENR, RCC_AHB2ENR_DAC1EN );    // Подать тактовый сигнал на DAC1
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <DAC1_Init+0x2c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a08      	ldr	r2, [pc, #32]	; (800042c <DAC1_Init+0x2c>)
 800040a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800040e:	6013      	str	r3, [r2, #0]
	SET_BIT(DAC1_CR, 1); 						  // Включить выход DAC1
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <DAC1_Init+0x30>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a06      	ldr	r2, [pc, #24]	; (8000430 <DAC1_Init+0x30>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6013      	str	r3, [r2, #0]
	DAC1_DHR12R1 = 0;							  // Записать 0 в регистр данных DAC1
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <DAC1_Init+0x34>)
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]

}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	4002104c 	.word	0x4002104c
 8000430:	50000800 	.word	0x50000800
 8000434:	50000808 	.word	0x50000808

08000438 <GpioInit>:
#include <stm32g431.h>


void GpioInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	SET_BIT(RCC_AHB2ENR, RCC_AHB2ENR_GPIOBEN);    // Подать тактовый сигнал на модуль GPIOA
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <GpioInit+0x3c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a0c      	ldr	r2, [pc, #48]	; (8000474 <GpioInit+0x3c>)
 8000442:	f043 0302 	orr.w	r3, r3, #2
 8000446:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB_MODER,  GPIO_MODER_MODE8, 1<<GPIO_MODER_MODE8_Pos); //Включить PIN8 на вывод (светодиод LD2)
 8000448:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <GpioInit+0x40>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000450:	4a09      	ldr	r2, [pc, #36]	; (8000478 <GpioInit+0x40>)
 8000452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000456:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB_MODER,  GPIO_MODER_MODE7, 1<<GPIO_MODER_MODE7_Pos); //Включить PIN7 на вывод
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <GpioInit+0x40>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000460:	4a05      	ldr	r2, [pc, #20]	; (8000478 <GpioInit+0x40>)
 8000462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	4002104c 	.word	0x4002104c
 8000478:	48000400 	.word	0x48000400

0800047c <main>:
void GpioInit(void);
void DAC1_Init(void);
void TIM2_Init(void);

int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0

	GpioInit();
 8000480:	f7ff ffda 	bl	8000438 <GpioInit>
	DAC1_Init();
 8000484:	f7ff ffbc 	bl	8000400 <DAC1_Init>
	TIM2_Init();
 8000488:	f000 f892 	bl	80005b0 <TIM2_Init>

	while(1)
 800048c:	e7fe      	b.n	800048c <main+0x10>
	...

08000490 <start_up>:
int main(void);
void SystemClock_Config(void);

/* Точка входа  */
void start_up(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
	uint32_t *src, *dst;

	/* Копирование данных секции .data из FLASH в RAM */
	src = &_sdata_flash;
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <start_up+0x50>)
 8000498:	607b      	str	r3, [r7, #4]
	dst = &_sdata_ram;
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <start_up+0x54>)
 800049c:	603b      	str	r3, [r7, #0]
	while (dst < &_edata_ram) {
 800049e:	e007      	b.n	80004b0 <start_up+0x20>
		*dst++ = *src++;
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	1d13      	adds	r3, r2, #4
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	1d19      	adds	r1, r3, #4
 80004aa:	6039      	str	r1, [r7, #0]
 80004ac:	6812      	ldr	r2, [r2, #0]
 80004ae:	601a      	str	r2, [r3, #0]
	while (dst < &_edata_ram) {
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <start_up+0x58>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d3f3      	bcc.n	80004a0 <start_up+0x10>
	}

	/* Запись нулей в область памяти секции .bss */
	dst = &_sbss;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <start_up+0x5c>)
 80004ba:	603b      	str	r3, [r7, #0]
	while (dst < &_ebss) {
 80004bc:	e004      	b.n	80004c8 <start_up+0x38>
		*dst++ = 0;
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	1d1a      	adds	r2, r3, #4
 80004c2:	603a      	str	r2, [r7, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
	while (dst < &_ebss) {
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <start_up+0x60>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d3f6      	bcc.n	80004be <start_up+0x2e>
	}

	SystemClock_Config();
 80004d0:	f000 f816 	bl	8000500 <SystemClock_Config>
	main();
 80004d4:	f7ff ffd2 	bl	800047c <main>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	08000644 	.word	0x08000644
 80004e4:	20000004 	.word	0x20000004
 80004e8:	20000004 	.word	0x20000004
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000004 	.word	0x20000004

080004f4 <nmi_handler>:

/* Обработчик немаскируемого прерывания  */
void nmi_handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	for (;;);
 80004f8:	e7fe      	b.n	80004f8 <nmi_handler+0x4>

080004fa <hardfault_handler>:
}

/* Обработчик прерывания аппаратной ошибки */
void hardfault_handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
	for (;;);
 80004fe:	e7fe      	b.n	80004fe <hardfault_handler+0x4>

08000500 <SystemClock_Config>:
}

void SystemClock_Config(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  //Включить режим повышения выходного напряжения  главного регулятора до 1,28 вольт
  CLEAR_BIT(PWR_CR5, PWR_CR5_R1MODE);
 8000504:	4b23      	ldr	r3, [pc, #140]	; (8000594 <SystemClock_Config+0x94>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a22      	ldr	r2, [pc, #136]	; (8000594 <SystemClock_Config+0x94>)
 800050a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]

  //Установка задержки чтения FLASH памяти до 4-х тактов
  FLASH_ACR=FLASH_ACR_DBG_SWEN  | FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_LATENCY_4WS ;
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <SystemClock_Config+0x98>)
 8000512:	4a22      	ldr	r2, [pc, #136]	; (800059c <SystemClock_Config+0x9c>)
 8000514:	601a      	str	r2, [r3, #0]
  while((FLASH_ACR & 0xf) != FLASH_ACR_LATENCY_4WS );
 8000516:	bf00      	nop
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <SystemClock_Config+0x98>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f003 030f 	and.w	r3, r3, #15
 8000520:	2b04      	cmp	r3, #4
 8000522:	d1f9      	bne.n	8000518 <SystemClock_Config+0x18>

  //Подключение внешнего кварцевого резонатора (HSE ON)
  SET_BIT(RCC_CR, RCC_CR_HSEON);
 8000524:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <SystemClock_Config+0xa0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <SystemClock_Config+0xa0>)
 800052a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800052e:	6013      	str	r3, [r2, #0]
  while(READ_BIT(RCC_CR, RCC_CR_HSERDY) != (RCC_CR_HSERDY));
 8000530:	bf00      	nop
 8000532:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <SystemClock_Config+0xa0>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800053e:	d1f8      	bne.n	8000532 <SystemClock_Config+0x32>

  //Настройка PLL, используемого для SYSCLK домена
  //PLLM=6 (значение поля 5), PLLN=85 (значение поля 85), PLLR=2 (значение поля 0)
  MODIFY_REG(RCC_PLLCFGR, RCC_PLLCFGR_PLLSRC     | RCC_PLLCFGR_PLLM         | RCC_PLLCFGR_PLLN             | RCC_PLLCFGR_PLLR,
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <SystemClock_Config+0xa4>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <SystemClock_Config+0xa8>)
 8000546:	4013      	ands	r3, r2
 8000548:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <SystemClock_Config+0xa4>)
 800054a:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800054e:	f043 0353 	orr.w	r3, r3, #83	; 0x53
 8000552:	6013      	str	r3, [r2, #0]
		                  RCC_PLLCFGR_PLLSRC_HSE | 5 <<RCC_PLLCFGR_PLLM_Pos | (85 << RCC_PLLCFGR_PLLN_Pos) | 0<<RCC_PLLCFGR_PLLR_Pos);

  //Включение PLL
  SET_BIT(RCC_CR, RCC_CR_PLLON);
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <SystemClock_Config+0xa0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <SystemClock_Config+0xa0>)
 800055a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800055e:	6013      	str	r3, [r2, #0]
  while(READ_BIT(RCC_CR, RCC_CR_PLLRDY) != (RCC_CR_PLLRDY));
 8000560:	bf00      	nop
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <SystemClock_Config+0xa0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800056a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800056e:	d1f8      	bne.n	8000562 <SystemClock_Config+0x62>

  //Включение выхода PLL, используемого для  SYSCLK
  SET_BIT(RCC_PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <SystemClock_Config+0xa4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <SystemClock_Config+0xa4>)
 8000576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800057a:	6013      	str	r3, [r2, #0]

  //Подключение выхода PLL в качестве источника  SYSCLK
  MODIFY_REG(RCC_CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <SystemClock_Config+0xac>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <SystemClock_Config+0xac>)
 8000582:	f043 0303 	orr.w	r3, r3, #3
 8000586:	6013      	str	r3, [r2, #0]


}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40007080 	.word	0x40007080
 8000598:	40022000 	.word	0x40022000
 800059c:	00040604 	.word	0x00040604
 80005a0:	40021000 	.word	0x40021000
 80005a4:	4002100c 	.word	0x4002100c
 80005a8:	f9ff800c 	.word	0xf9ff800c
 80005ac:	40021008 	.word	0x40021008

080005b0 <TIM2_Init>:
#include <stm32g431.h>


void TIM2_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  SET_BIT(RCC_APB1ENR1, RCC_APB1ENR1_TIM2EN); // Подаем на TIM2 тактовую частоту
 80005b4:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <TIM2_Init+0x48>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <TIM2_Init+0x48>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]

  // Загружаем Auto-reload register  f = 170 000 000/(TIM2_ARR + 1) (1 MHz -> 170 - 1)
  TIM2_ARR = 170 - 1;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <TIM2_Init+0x4c>)
 80005c2:	22a9      	movs	r2, #169	; 0xa9
 80005c4:	601a      	str	r2, [r3, #0]

  SET_BIT(NVIC_ISER0, (1 << 28));		// Разрешить в NVIC прерывание #28 (TIM2)
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <TIM2_Init+0x50>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <TIM2_Init+0x50>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	6013      	str	r3, [r2, #0]
  SET_BIT(TIM2_DIER, TIM_DIER_UIE);		// Разрешить прерывание по переполнению таймера
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <TIM2_Init+0x54>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <TIM2_Init+0x54>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6013      	str	r3, [r2, #0]
  SET_BIT(TIM2_CR1, TIM_CR1_CEN);		// Включить таймер
 80005de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6013      	str	r3, [r2, #0]
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	40021058 	.word	0x40021058
 80005fc:	4000002c 	.word	0x4000002c
 8000600:	e000e100 	.word	0xe000e100
 8000604:	4000000c 	.word	0x4000000c

08000608 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	// Переменная I увеличивается на 1 при каждом вызове обработчика прерывания
	static int	 I=0;

	CLEAR_BIT(TIM2_SR, TIM_SR_UIF);	      //Сброс флага переполнения
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <TIM2_IRQHandler+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <TIM2_IRQHandler+0x28>)
 8000612:	f023 0301 	bic.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]
	DAC1_DHR12R1 = I++;					  // Запись в регистр данных DAC 12-ти младших разрядов переменной I
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <TIM2_IRQHandler+0x2c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	4905      	ldr	r1, [pc, #20]	; (8000634 <TIM2_IRQHandler+0x2c>)
 8000620:	600a      	str	r2, [r1, #0]
 8000622:	4a05      	ldr	r2, [pc, #20]	; (8000638 <TIM2_IRQHandler+0x30>)
 8000624:	6013      	str	r3, [r2, #0]

}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40000010 	.word	0x40000010
 8000634:	20000000 	.word	0x20000000
 8000638:	50000808 	.word	0x50000808

Disassembly of section .init:

0800063c <_init>:
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063e:	bf00      	nop

Disassembly of section .fini:

08000640 <_fini>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	bf00      	nop
