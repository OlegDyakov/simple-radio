
03_TIM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vectors      00000400  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  08000610  08000610  00010610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  5 .data         00000000  20000000  20000000  00010614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ARM.attributes 00000030  00000000  00000000  00010614  2**0
                  CONTENTS, READONLY
  7 .comment      00000053  00000000  00000000  00010644  2**0
                  CONTENTS, READONLY
  8 .debug_info   000002eb  00000000  00000000  00010697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000022b  00000000  00000000  00010982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000000b8  00000000  00000000  00010bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000068  00000000  00000000  00010c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00001038  00000000  00000000  00010ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00000392  00000000  00000000  00011d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000046f0  00000000  00000000  00012097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00000140  00000000  00000000  00016788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000400 <GpioInit>:
#include <stm32g431.h>


void GpioInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
	SET_BIT(RCC_AHB2ENR, RCC_AHB2ENR_GPIOBEN);    // Подать тактовый сигнал на модуль GPIOA
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <GpioInit+0x3c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a0c      	ldr	r2, [pc, #48]	; (800043c <GpioInit+0x3c>)
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB_MODER,  GPIO_MODER_MODE8, 1<<GPIO_MODER_MODE8_Pos); //Включить PIN8 на вывод (светодиод LD2)
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <GpioInit+0x40>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000418:	4a09      	ldr	r2, [pc, #36]	; (8000440 <GpioInit+0x40>)
 800041a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800041e:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB_MODER,  GPIO_MODER_MODE7, 1<<GPIO_MODER_MODE7_Pos); //Включить PIN7 на вывод
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <GpioInit+0x40>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000428:	4a05      	ldr	r2, [pc, #20]	; (8000440 <GpioInit+0x40>)
 800042a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042e:	6013      	str	r3, [r2, #0]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	4002104c 	.word	0x4002104c
 8000440:	48000400 	.word	0x48000400

08000444 <main>:

void GpioInit(void);
void TIM2_Init(void);

int main(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0

	GpioInit();
 8000448:	f7ff ffda 	bl	8000400 <GpioInit>
	TIM2_Init();
 800044c:	f000 f88c 	bl	8000568 <TIM2_Init>

	while(1)
 8000450:	e7fe      	b.n	8000450 <main+0xc>
	...

08000454 <start_up>:
void SystemClock_Config(void);


/* Точка входа  */
void start_up(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
	uint32_t *src, *dst;

	/* Копирование данных секции .data из FLASH в RAM */
	src = &_sdata_flash;
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <start_up+0x50>)
 800045c:	607b      	str	r3, [r7, #4]
	dst = &_sdata_ram;
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <start_up+0x54>)
 8000460:	603b      	str	r3, [r7, #0]
	while (dst < &_edata_ram) {
 8000462:	e007      	b.n	8000474 <start_up+0x20>
		*dst++ = *src++;
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	1d13      	adds	r3, r2, #4
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	1d19      	adds	r1, r3, #4
 800046e:	6039      	str	r1, [r7, #0]
 8000470:	6812      	ldr	r2, [r2, #0]
 8000472:	601a      	str	r2, [r3, #0]
	while (dst < &_edata_ram) {
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <start_up+0x58>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d3f3      	bcc.n	8000464 <start_up+0x10>
	}

	/* Запись нулей в область памяти секции .bss */
	dst = &_sbss;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <start_up+0x5c>)
 800047e:	603b      	str	r3, [r7, #0]
	while (dst < &_ebss) {
 8000480:	e004      	b.n	800048c <start_up+0x38>
		*dst++ = 0;
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	1d1a      	adds	r2, r3, #4
 8000486:	603a      	str	r2, [r7, #0]
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
	while (dst < &_ebss) {
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	4a09      	ldr	r2, [pc, #36]	; (80004b4 <start_up+0x60>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d3f6      	bcc.n	8000482 <start_up+0x2e>
	}

	SystemClock_Config();
 8000494:	f000 f810 	bl	80004b8 <SystemClock_Config>
	main();
 8000498:	f7ff ffd4 	bl	8000444 <main>
}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	08000614 	.word	0x08000614
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000000 	.word	0x20000000
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000000 	.word	0x20000000

080004b8 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  //Включить режим повышения выходного напряжения  главного регулятора до 1,28 вольт
  CLEAR_BIT(PWR_CR5, PWR_CR5_R1MODE);
 80004bc:	4b23      	ldr	r3, [pc, #140]	; (800054c <SystemClock_Config+0x94>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a22      	ldr	r2, [pc, #136]	; (800054c <SystemClock_Config+0x94>)
 80004c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004c6:	6013      	str	r3, [r2, #0]

  //Установка задержки чтения FLASH памяти до 4-х тактов
  FLASH_ACR=FLASH_ACR_DBG_SWEN  | FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_LATENCY_4WS ;
 80004c8:	4b21      	ldr	r3, [pc, #132]	; (8000550 <SystemClock_Config+0x98>)
 80004ca:	4a22      	ldr	r2, [pc, #136]	; (8000554 <SystemClock_Config+0x9c>)
 80004cc:	601a      	str	r2, [r3, #0]
  while((FLASH_ACR & 0xf) != FLASH_ACR_LATENCY_4WS );
 80004ce:	bf00      	nop
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <SystemClock_Config+0x98>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f003 030f 	and.w	r3, r3, #15
 80004d8:	2b04      	cmp	r3, #4
 80004da:	d1f9      	bne.n	80004d0 <SystemClock_Config+0x18>

  //Подключение внешнего кварцевого резонатора (HSE ON)
  SET_BIT(RCC_CR, RCC_CR_HSEON);
 80004dc:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <SystemClock_Config+0xa0>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a1d      	ldr	r2, [pc, #116]	; (8000558 <SystemClock_Config+0xa0>)
 80004e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e6:	6013      	str	r3, [r2, #0]
  while(READ_BIT(RCC_CR, RCC_CR_HSERDY) != (RCC_CR_HSERDY));
 80004e8:	bf00      	nop
 80004ea:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <SystemClock_Config+0xa0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80004f6:	d1f8      	bne.n	80004ea <SystemClock_Config+0x32>

  //Настройка PLL, используемого для SYSCLK домена
  //PLLM=6 (значение поля 5), PLLN=85 (значение поля 85), PLLR=2 (значение поля 0)
  MODIFY_REG(RCC_PLLCFGR, RCC_PLLCFGR_PLLSRC     | RCC_PLLCFGR_PLLM         | RCC_PLLCFGR_PLLN             | RCC_PLLCFGR_PLLR,
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <SystemClock_Config+0xa4>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <SystemClock_Config+0xa8>)
 80004fe:	4013      	ands	r3, r2
 8000500:	4a16      	ldr	r2, [pc, #88]	; (800055c <SystemClock_Config+0xa4>)
 8000502:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000506:	f043 0353 	orr.w	r3, r3, #83	; 0x53
 800050a:	6013      	str	r3, [r2, #0]
		                  RCC_PLLCFGR_PLLSRC_HSE | 5 <<RCC_PLLCFGR_PLLM_Pos | (85 << RCC_PLLCFGR_PLLN_Pos) | 0<<RCC_PLLCFGR_PLLR_Pos);

  //Включение PLL
  SET_BIT(RCC_CR, RCC_CR_PLLON);
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <SystemClock_Config+0xa0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <SystemClock_Config+0xa0>)
 8000512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000516:	6013      	str	r3, [r2, #0]
  while(READ_BIT(RCC_CR, RCC_CR_PLLRDY) != (RCC_CR_PLLRDY));
 8000518:	bf00      	nop
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <SystemClock_Config+0xa0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000526:	d1f8      	bne.n	800051a <SystemClock_Config+0x62>

  //Включение выхода PLL, используемого для  SYSCLK
  SET_BIT(RCC_PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <SystemClock_Config+0xa4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <SystemClock_Config+0xa4>)
 800052e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000532:	6013      	str	r3, [r2, #0]

  //Подключение выхода PLL в качестве источника  SYSCLK
  MODIFY_REG(RCC_CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <SystemClock_Config+0xac>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <SystemClock_Config+0xac>)
 800053a:	f043 0303 	orr.w	r3, r3, #3
 800053e:	6013      	str	r3, [r2, #0]


}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40007080 	.word	0x40007080
 8000550:	40022000 	.word	0x40022000
 8000554:	00040604 	.word	0x00040604
 8000558:	40021000 	.word	0x40021000
 800055c:	4002100c 	.word	0x4002100c
 8000560:	f9ff800c 	.word	0xf9ff800c
 8000564:	40021008 	.word	0x40021008

08000568 <TIM2_Init>:
#include <stm32g431.h>


void TIM2_Init(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  SET_BIT(RCC_APB1ENR1, RCC_APB1ENR1_TIM2EN); // Подаем на TIM2 тактовую частоту
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <TIM2_Init+0x48>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <TIM2_Init+0x48>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]
  TIM2_ARR = 85000000 - 1;     				  // Загружаем Auto-reload register  f = 170 000 000/(K+1) (2Hz -> 85000000 - 1)
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <TIM2_Init+0x4c>)
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <TIM2_Init+0x50>)
 800057c:	601a      	str	r2, [r3, #0]

  SET_BIT(NVIC_ISER0, (1 << 28));		// Разрешить в NVIC прерывание #28 (TIM2)
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <TIM2_Init+0x54>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <TIM2_Init+0x54>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	6013      	str	r3, [r2, #0]
  SET_BIT(TIM2_DIER, TIM_DIER_UIE);		// Разрешить прерывание по переполнению таймера
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <TIM2_Init+0x58>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <TIM2_Init+0x58>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]
  SET_BIT(TIM2_CR1, TIM_CR1_CEN);		// Включить таймер
 8000596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6013      	str	r3, [r2, #0]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021058 	.word	0x40021058
 80005b4:	4000002c 	.word	0x4000002c
 80005b8:	0510ff3f 	.word	0x0510ff3f
 80005bc:	e000e100 	.word	0xe000e100
 80005c0:	4000000c 	.word	0x4000000c

080005c4 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	CLEAR_BIT(TIM2_SR, TIM_SR_UIF);	      //Сброс флага переполнения
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <TIM2_IRQHandler+0x34>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <TIM2_IRQHandler+0x34>)
 80005ce:	f023 0301 	bic.w	r3, r3, #1
 80005d2:	6013      	str	r3, [r2, #0]
	INVERT_BIT(GPIOB_ODR, GPIO_ODR_OD7);  //Инвертировать (PB7)
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <TIM2_IRQHandler+0x38>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a08      	ldr	r2, [pc, #32]	; (80005fc <TIM2_IRQHandler+0x38>)
 80005da:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80005de:	6013      	str	r3, [r2, #0]
	INVERT_BIT(GPIOB_ODR, GPIO_ODR_OD8);  //Инвертировать LD2 (PB8)
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <TIM2_IRQHandler+0x38>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a05      	ldr	r2, [pc, #20]	; (80005fc <TIM2_IRQHandler+0x38>)
 80005e6:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40000010 	.word	0x40000010
 80005fc:	48000414 	.word	0x48000414

08000600 <nmi_handler>:
};


/* Обработчик немаскируемого прерывания  */
void nmi_handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	for (;;);
 8000604:	e7fe      	b.n	8000604 <nmi_handler+0x4>

08000606 <hardfault_handler>:
}

/* Обработчик прерывания аппаратной ошибки */
void hardfault_handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
	for (;;);
 800060a:	e7fe      	b.n	800060a <hardfault_handler+0x4>

Disassembly of section .init:

0800060c <_init>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	bf00      	nop

Disassembly of section .fini:

08000610 <_fini>:
 8000610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000612:	bf00      	nop
